<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--导入数据库连接信息-->
    <context:property-placeholder location="classpath:jdbc.properes"/>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${jdbc.url}"/>
        <!--set注入-->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.passwd}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>

    </bean>
    <!--声明mybatis中的sqlSession类-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <property name="dataSource" ref="dataSource"/>
        <!--读取mybatis配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>
    <!--创建dao对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlsessionFactory的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定dao接口的包名-->
        <property name="basePackage" value="com.xqr.dao" /><!--包名-->
    </bean>
    <!--声明service-->
    <bean id="BuyGoodsService" class="com.xqr.service.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>
    <!--声明式事务处理：与源代码分离-->
    <!--声明事务对象-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--声明业务方法事务属性-->
    <!--id自定义，表示配置内容
          transaction:事务 -->

    <tx:advice id="myaAdvice" transaction-manager="transactionManager">
        <tx:attributes><!--配置属性-->
            <!--name：1.方法名，不带包和类
                      2.可以使用通配符
              propagation ；传播行为
              isolation;隔离行为
              rollback-for：指定异常回滚
               -->
            <tx:method name="buy"
                       propagation="REQUIRED"
                       isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,
                     com.xqr.excep.NotEnougEcpection"/><!--给方法配置-->
        <!--可以使用通配符指定很多方法-->
            <tx:method name="add*" propagation="REQUIRES_NEW"/>

        </tx:attributes>
    </tx:advice>
    <!--配置aop-->
    <aop:config>
        <!--接入点表达式-->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器：关联adcicehe1pointcut-->
        <aop:advisor advice-ref="myaAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>